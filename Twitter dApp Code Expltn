// Import ABI (Application Binary Interface) for the smart contract.
// Create a Web3 instance using the user's Ethereum provider (MetaMask).
// Address of the deployed smart contract.
// Initialize the contract with the ABI and address.

import contractABI from "./abi.json";                   
const contractAddress = "0x608E87cFb4732E2bd1223a2818C638A7fa7D2722";                  
let web3 = new Web3(window.ethereum);         
let contract = new web3.eth.Contract(contractABI, contractAddress); 

//Notes:
// contractABI: The smart contract ABI defines the methods and events that the contract exposes. Itâ€™s imported from a JSON file.
// contractAddress: The address of the deployed smart contract on the Ethereum network.
// web3: This is the Web3.js library, which is used to interact with the Ethereum blockchain through MetaMask (window.ethereum).
// contract: An instance of the contract that allows you to interact with the deployed contract methods.


// connectWallet function:
// This function requests the user to connect their wallet
// It checks if the browser has Ethereum support (window.ethereum).
// It requests the user's Ethereum account (eth_requestAccounts).
// If the connection is successful, the setConnected function is called to update the UI.
// If MetaMask is not detected, it shows an error message.

async function connectWallet() {
  if (window.ethereum) {
    const accounts = await window.ethereum
      .request({ method: "eth_requestAccounts" })
      .catch((err) => {
        if (err.code === 4001) {
          console.log("Please connect to MetaMask.");
        } else {
          console.error(err);
        }
      });
    setConnected(accounts[0]);
    if (accounts[0]) {
      console.log("We have an account");
    }
  } else {
    console.error("No web3 provider detected");
    document.getElementById("connectMessage").innerText =
      "No web3 provider detected. Please install MetaMask.";
  }
}




// createTweet function
// This function allows the user to create tweets by calling the createTweet method from the smart contract.
// It retrieves the user's Ethereum account.
// It sends the createTweet transaction to the contract with the tweet content.
// On success, it calls displayTweets to refresh the tweet list.

async function createTweet(content) {
  const accounts = await web3.eth.getAccounts();
  try {
    await contract.methods.createTweet(content).send({ from: accounts[0] });
    displayTweets(accounts[0]);
  } catch (error) {
    console.error("User rejected request:", error);
  }
}




// displayTweets function 
// This function displays all the tweets
// It fetches all tweets from the smart contract using getAllTweets.
// The tweets are sorted by their timestamp in descending order (most recent first).
// For each tweet, the function dynamically creates HTML elements to display the tweet content, the author's address (shortened), and a like button.
// It also adds an event listener to the like button for liking tweets.


async function displayTweets(userAddress) {
  const tweetsContainer = document.getElementById("tweetsContainer");
  tweetsContainer.innerHTML = "";
  const tempTweets = await contract.methods.getAllTweets(userAddress).call();
  const tweets = [...tempTweets];
  tweets.sort((a, b) => b.timestamp - a.timestamp);
  for (let i = 0; i < tweets.length; i++) {
    const tweetElement = document.createElement("div");
    tweetElement.className = "tweet";

    const userIcon = document.createElement("img");
    userIcon.className = "user-icon";
    userIcon.src = `https://avatars.dicebear.com/api/human/${tweets[i].author}.svg`;
    userIcon.alt = "User Icon";

    tweetElement.appendChild(userIcon);

    const tweetInner = document.createElement("div");
    tweetInner.className = "tweet-inner";
    tweetInner.innerHTML += `
        <div class="author">${shortAddress(tweets[i].author)}</div>
        <div class="content">${tweets[i].content}</div>
    `;

    const likeButton = document.createElement("button");
    likeButton.className = "like-button";
    likeButton.innerHTML = `
        <i class="far fa-heart"></i>
        <span class="likes-count">${tweets[i].likes}</span>
    `;
    likeButton.setAttribute("data-id", tweets[i].id);
    likeButton.setAttribute("data-author", tweets[i].author);

    addLikeButtonListener(
      likeButton,
      userAddress,
      tweets[i].id,
      tweets[i].author
    );
    tweetInner.appendChild(likeButton);
    tweetElement.appendChild(tweetInner);

    tweetsContainer.appendChild(tweetElement);
  }
}



// addLikeButtonListener function
// This function attaches a click event listener to the like button of each tweet.
// When the like button is clicked, it triggers the likeTweet function to interact with the contract and register the like.
// After the transaction is processed, it refreshes the list of tweets.

function addLikeButtonListener(likeButton, address, id, author) {
  likeButton.addEventListener("click", async (e) => {
    e.preventDefault();
    e.currentTarget.innerHTML = '<div class="spinner"></div>';
    e.currentTarget.disabled = true;
    try {
      await likeTweet(author, id);
      displayTweets(address);
    } catch (error) {
      console.error("Error liking tweet:", error);
    }
  });
}



// likeTweetFunction
// It allows the user to like tweets
// It sends the likeTweet transaction to the smart contract, specifying the author and tweet ID.
// The user's Ethereum account is used to sign and send the transaction.

async function likeTweet(author, id) {
  try {
    const accounts = await web3.eth.getAccounts();
    await contract.methods.likeTweet(author, id).send({ from: accounts[0] });
  } catch (error) {
    console.error("User rejected request:", error);
  }
}




// shortAddress function
// It shortens an Ethereum address to make it more readable by 
// displaying the first 6 characters, followed by ..., and then the last 4 characters.

function shortAddress(address, startLength = 6, endLength = 4) {
  return `${address.slice(0, startLength)}...${address.slice(-endLength)}`;
}




// setConnected function
// This function updates the UI when the user successfully connects their wallet.
// It shows the shortened Ethereum address.
// It hides the "connectMessage" and shows the tweet form.
// It calls displayTweets to load and display the user's tweets.

function setConnected(address) {
  document.getElementById("userAddress").innerText =
    "Connected: " + shortAddress(address);
  document.getElementById("connectMessage").style.display = "none";
  document.getElementById("tweetForm").style.display = "block";
  displayTweets(address);
}


// Event Listeners for Wallet Connection and Tweet Submission
// connectWalletBtn: When clicked, this button triggers the wallet connection process (connectWallet).
// tweetForm: When the tweet form is submitted, the content of the tweet is sent to the smart contract via the createTweet function.

document
  .getElementById("connectWalletBtn")
  .addEventListener("click", connectWallet);

document.getElementById("tweetForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const content = document.getElementById("tweetContent").value;
  const tweetSubmitButton = document.getElementById("tweetSubmitBtn");
  tweetSubmitButton.innerHTML = '<div class="spinner"></div>';
  tweetSubmitButton.disabled = true;
  try {
    await createTweet(content);
  } catch (error) {
    console.error("Error sending tweet:", error);
  } finally {
    tweetSubmitButton.innerHTML = "Tweet";
    tweetSubmitButton.disabled = false;
  }
});

