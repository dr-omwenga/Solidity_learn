// Import ABI (Application Binary Interface) for the smart contract.
// Create a Web3 instance using the user's Ethereum provider (MetaMask).
// Address of the deployed smart contract.
// Initialize the contract with the ABI and address.

import contractABI from "./abi.json";                   
const contractAddress = "0x608E87cFb4732E2bd1223a2818C638A7fa7D2722";                  
let web3 = new Web3(window.ethereum);         
let contract = new web3.eth.Contract(contractABI, contractAddress); 

//Notes:
// contractABI: The smart contract ABI defines the methods and events that the contract exposes. Itâ€™s imported from a JSON file.
// contractAddress: The address of the deployed smart contract on the Ethereum network.
// web3: This is the Web3.js library, which is used to interact with the Ethereum blockchain through MetaMask (window.ethereum).
// contract: An instance of the contract that allows you to interact with the deployed contract methods.


// connectWallet function:
// This function requests the user to connect their wallet
// It checks if the browser has Ethereum support (window.ethereum).
// It requests the user's Ethereum account (eth_requestAccounts).
// If the connection is successful, the setConnected function is called to update the UI.
// If MetaMask is not detected, it shows an error message.

async function connectWallet() {
  if (window.ethereum) {
    const accounts = await window.ethereum
      .request({ method: "eth_requestAccounts" })
      .catch((err) => {
        if (err.code === 4001) {
          console.log("Please connect to MetaMask.");
        } else {
          console.error(err);
        }
      });
    setConnected(accounts[0]);
    if (accounts[0]) {
      console.log("We have an account");
    }
  } else {
    console.error("No web3 provider detected");
    document.getElementById("connectMessage").innerText =
      "No web3 provider detected. Please install MetaMask.";
  }
}


// createTweet function
// This function allows the user to create tweets by calling the createTweet method from the smart contract.
// It retrieves the user's Ethereum account.
// It sends the createTweet transaction to the contract with the tweet content.
// On success, it calls displayTweets to refresh the tweet list.

async function createTweet(content) {
  const accounts = await web3.eth.getAccounts();
  try {
    await contract.methods.createTweet(content).send({ from: accounts[0] });
    displayTweets(accounts[0]);
  } catch (error) {
    console.error("User rejected request:", error);
  }
}










